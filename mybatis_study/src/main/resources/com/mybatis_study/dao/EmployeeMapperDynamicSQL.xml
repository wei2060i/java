<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis_study.dao.EmployeeMapperDynamicSQL">
    <!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 -->
    <!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
    <select id="getEmployeesByConditionIf" resultType="com.mybatis_study.bean.Employee">
        select * from t_employee
        <!-- where 能处理掉sql前面多出来的 and or 等等-->
        <where>
            <!--test:判断表达式(OGNL)
            OGNL参照PPT或者官方文档。 c:if test
            从参数中取值进行判断,遇见特殊符号应该去写转义字符:
            -->
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=''">
                and email=#{email}
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </where>
    </select>
    <!-- 后面多出的and或者or where标签不能解决
             prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
                     prefix给拼串后的整个字符串加一个前缀
             prefixOverrides="":
                     前缀覆盖:去掉整个字符串前面多余的字符
             suffix="":后缀
                     suffix给拼串后的整个字符串加一个后缀
             suffixOverrides=""
                     后缀覆盖:去掉整个字符串后面多余的字符
             -->
    <select id="getEmployeeByConditionTrim" resultType="com.mybatis_study.bean.Employee">
    select * from t_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email=#{email} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>
    </select>

    <select id="getEmpByConditionChoose" resultType="com.mybatis_study.bean.Employee">
        select * from t_employee
        <where>
            <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>
    <update id="updateEmp">
        <!-- Set标签的使用 -->
        update t_employee
        <set>
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </set>
        where id=#{id}
        <!--
                update t_employee
                <trim prefix="set" suffixOverrides=",">
                    <if test="lastName!=null">
                        last_name=#{lastName},
                    </if>
                    <if test="email!=null">
                        email=#{email},
                    </if>
                    <if test="gender!=null">
                        gender=#{gender}
                    </if>
                </trim>
                where id=#{id}  -->
    </update>
    <select id="getEmpByConditionForeach" resultType="com.mybatis_study.bean.Employee">
        select * from t_employee
        <!--
            collection:指定要遍历的集合
                list类型的参数会特殊处理封装在map中,map的key就叫list
            item:将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分隔符
            open：遍历出所有结果拼接一个开始的字符
            close:遍历出所有结果拼接一个结束的字符
            index:索引。遍历list的时候是index就是索引,item就是当前值
                          遍历map的时候index表示的就是map的key，item就是map的值
            #{变量名}就能取出变量的值也就是当前遍历出的元素
          -->
        <foreach collection="ids" item="item_id" separator=","
                 open="where id in(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法-->
    <insert id="addEmployees">
        insert into tbl_employee(
        <include refid="insertColumn"></include>
        )
        values
        <foreach collection="employees" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert><!--   -->

    <sql id="insertColumn">
        <if test="_databaseId=='oracle'">
            employee_id,last_name,email
        </if>
        <if test="_databaseId=='mysql'">
            last_name,email,gender,d_id
        </if>
    </sql>

    <!-- Oracle数据库批量保存：
            Oracle不支持values(),(),()
            Oracle支持的批量方式
            1、多个insert放在begin - end里面
                begin
                   insert into employees(employee_id,last_name,email)
                   values(employees_seq.nextval,'test_001','test_001@atguigu.com');
                   insert into employees(employee_id,last_name,email)
                   values(employees_seq.nextval,'test_002','test_002@atguigu.com');
               end;
           2、利用中间表：
               insert into employees(employee_id,last_name,email)
                  select employees_seq.nextval,lastName,email from(
                         select 'test_a_01' lastName,'test_a_e01' email from dual
                         union
                         select 'test_a_02' lastName,'test_a_e02' email from dual
                         union
                         select 'test_a_03' lastName,'test_a_e03' email from dual
                  )
        -->

    <insert id="addEmployeesOracle" databaseId="oracle">
        <!-- oracle第一种批量方式 -->
        <!-- <foreach collection="employees" item="emp" open="begin" close="end;">
            insert into employees(employee_id,last_name,email)
               values(employees_seq.nextval,#{emp.lastName},#{emp.email});
        </foreach> -->

        <!-- oracle第二种批量方式  -->
        insert into employees(
        <!-- 引用外部定义的sql -->
        <include refid="insertColumn"> </include>
        )
        <foreach collection="employees" item="emp" separator="union"
                 open="select employees_seq.nextval,lastName,email from("
                 close=")">
            select #{emp.lastName} lastName,#{emp.email} email from dual
        </foreach>
    </insert>

</mapper>